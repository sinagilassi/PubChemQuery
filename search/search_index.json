{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PubChemQuery","text":"<p>PubChemQuery: A Python Package for Accessing Chemical Information from PubChem.</p> <p>PubChemQuery is a Python package that provides a simple and intuitive API for retrieving chemical information from the PubChem database. With this package, you can easily fetch chemical data, including:</p> <ul> <li>CID (Compound ID) by name</li> <li>All CIDs by name</li> <li>2D images by CID or name</li> <li>SDF (Structure Data File) by CID or name</li> <li>Compound properties, including:<ul> <li>Molecular formula and weight</li> <li>SMILES and InChI representations</li> <li>IUPAC name and title</li> <li>Physicochemical properties (e.g., XLogP, exact mass, TPSA)</li> <li>Structural features (e.g., bond and atom counts, stereochemistry)</li> <li>3D properties (e.g., volume, steric quadrupole moments, feature counts)</li> <li>Fingerprint and conformer information</li> </ul> </li> </ul> <p>The package offers a straightforward interface, allowing users to access PubChem data with minimal code. Whether you're a chemist, researcher, or developer, PubChemQuery simplifies the process of integrating chemical information into your projects.</p> <p>Key Features:</p> <p>Retrieve chemical data by name or CID Access 2D images and SDF files Get compound properties, including physicochemical, structural, and 3D features Easy-to-use API with minimal code required</p> <p>Simple and Concise API:</p> <p>There are functions that perform all of the above-mentioned tasks, making it easy to integrate PubChem data into your projects:</p> <ul> <li><code>get_cid_by_inchi(inchi)</code>: Get a CID by InChI</li> <li><code>get_cids_by_formula(formula)</code>: Get CIDs by formula</li> <li><code>get_cid_by_name(name)</code>: Get CID by name</li> <li><code>get_cids_by_name(name)</code>: Get all CIDs by name</li> <li><code>get_image_by_cid(cid)</code>: Get 2D image by CID</li> <li><code>get_image_by_name(name)</code>: Get 2D image by name</li> <li><code>get_image_by_inchi(inchi)</code>: Get 2D image by InChI</li> <li><code>get_structure_by_cid(cid)</code>: Get SDF by CID</li> <li><code>get_structure_by_name(name)</code>: Get SDF by name</li> <li><code>get_similar_structures_cids_by_compound_id(cid/SMILES/InChI)</code>: Get similar structures CIDs by cid, SMILES, InChI</li> </ul> <p>Compound Object: The package also includes a <code>Compound</code> object that encapsulates the retrieved data, providing a convenient way to access and manipulate the data.</p> <ul> <li><code>compound(cid_or_name)</code>: Create a compound object with properties and methods</li> </ul> <p>Getting Started:</p> <p>To use PubChemQuery, simply install the package and import it into your Python script. Refer to the example code snippets above for a quick start.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install PubChemQuery with pip</p> <pre><code>  pip install PubChemQuery\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>Import package as:</p> <pre><code>import pubchemquery as pcq\n</code></pre> <p>Use the functions to retrieve data:</p> <pre><code># get a cid by formula\ncid = pcq.get_cids_by_formula('C6H6')\nprint(type(cid), len(cid))\n</code></pre> <pre><code># get a cid by inchi\ncid = pcq.get_cid_by_inchi(\n    'InChI=1S/C6H5NO3/c8-6-3-1-5(2-4-6)7(9)10/h1-4,8H')\nprint(cid)\n</code></pre> <pre><code># get a cid by name\ncid = pcq.get_cid_by_name('benzene')\nprint(cid)\n</code></pre> <pre><code># get all cids by name\ncids = pcq.get_cids_by_name('benzene')\nprint(type(cids), len(cids))\n</code></pre> <pre><code># get 2d image\n# by cid\nimage = pcq.get_image_by_cid('241')\nimage\n\n# by name\nimage = pcq.get_image_by_name('benzene')\nimage\n\n# by inchi\nimage = pcq.get_image_by_inchi(\n    'InChI=1S/C6H5NO3/c8-6-3-1-5(2-4-6)7(9)10/h1-4,8H')\nprint(image)\n</code></pre> <pre><code># get sdf by cid\nsdf = pcq.get_structure_by_cid('241')\nprint(sdf)\n</code></pre> <pre><code># get sdf by name\nsdf = pcq.get_structure_by_name('benzene')\nprint(sdf)\n</code></pre> <pre><code># get similar structure cids by cid\n# cids = pcq.get_similar_structures_cids_by_compound_id('241')\n# cids = pcq.get_similar_structures_cids_by_compound_id(\n#     'C1=CC=CC=C1', compound_id='SMILES')\ncids = pcq.get_similar_structures_cids_by_compound_id(\n    'InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H', compound_id='InChI')\nprint(type(cids), len(cids))\n</code></pre> <p>Make a compound and then get its properties:</p> <pre><code># make a compound\ncid = 2244\n# compound = pcq.compound(cid)\n# name\nname = '2-acetyloxybenzoic acid'\ncompound = pcq.compound(name)\nprint(compound)\n# properties\n# InChI\nprint(compound.InChI)\n# InChIKey\nprint(compound.InChIKey)\n# IUPACName\nprint(compound.IUPACName)\n# similar structure cids\nprint(len(compound.similar_structure_cids))\n# image\ncompound.image\n# dataframe\ncompound.prop_df()\n</code></pre>"},{"location":"#faq","title":"FAQ","text":"<p>For any question, contact me on LinkedIn </p>"},{"location":"#authors","title":"Authors","text":"<ul> <li>@sinagilassi</li> </ul>"},{"location":"modules/","title":"Modules","text":""},{"location":"modules/#pubchemquery.app.compound","title":"<code>compound(id, image_format='2d', image_size='large', similarity_type='fastsimilarity_2d')</code>","text":"<p>make a compound by cid, then get its information</p>"},{"location":"modules/#pubchemquery.app.compound--parameters","title":"Parameters","text":"<p>id: str or int     compound cid or name (https://pubchem.ncbi.nlm.nih.gov/) image_format : str     3d, 2d (default: 2d) image_size : str     small, large, 250x250 similarity_type : str     fastsimilarity_2d, fastsimilarity_3d (default: fastsimilarity_2d)</p>"},{"location":"modules/#pubchemquery.app.compound--returns","title":"Returns","text":"<p>object     compound object with all properties</p> Source code in <code>pubchemquery/app.py</code> <pre><code>def compound(id: str, image_format='2d', image_size='large', similarity_type='fastsimilarity_2d'):\n    '''\n    make a compound by cid, then get its information\n\n    Parameters\n    ----------\n    id: str or int\n        compound cid or name (https://pubchem.ncbi.nlm.nih.gov/)\n    image_format : str\n        3d, 2d (default: 2d)\n    image_size : str\n        small, large, 250x250\n    similarity_type : str\n        fastsimilarity_2d, fastsimilarity_3d (default: fastsimilarity_2d)\n\n    Returns\n    -------\n    object\n        compound object with all properties\n    '''\n    try:\n        # set\n        cid = 0\n        name = ''\n        id = str(id)\n\n        # check id is number\n        pattern = re.compile(r'^\\d+$')\n        pattern_res = bool(pattern.match(id))\n\n        if pattern_res is False:\n            name = str(id).strip()\n        else:\n            cid = str(id)\n\n        # compound obj\n        if cid != 0:\n            # check\n            cid = str(cid).strip()\n            # check compound name\n            compound_obj = PubChemAPI(cid, '')\n            # update properties\n            compound_obj.update_properties()\n            # sleep\n            time.sleep(0.5)\n            # update img\n            img = PubChemAPI.get_structure_image(\n                cid=int(cid), image_format=image_format, image_size=image_size)\n            # update img prop\n            compound_obj.image = img\n            time.sleep(0.5)\n            # search for similarities\n            similar_cids = PubChemAPI.get_similar_cids_by_compound_id(\n                cid, similarity_type=similarity_type)\n            # update\n            compound_obj.similar_structure_cids = similar_cids\n            # return\n            return compound_obj\n        elif name != '':\n            # check\n            name = str(name).strip()\n            # get cid\n            _cid = PubChemAPI.get_cid_by_name(name, name_type='complete')\n            # check\n            if len(_cid) == 1:\n                # update\n                cid = str(_cid[0]).strip()\n                # check compound name\n                compound_obj = PubChemAPI(cid, name)\n                # sleep\n                time.sleep(0.5)\n                # check\n                if compound_obj:\n                    # update properties\n                    compound_obj.update_properties()\n                # sleep\n                time.sleep(0.5)\n                # image\n                img = PubChemAPI.get_structure_image(\n                    name=name, image_format=image_format, image_size=image_size)\n                # update img\n                compound_obj.image = img\n                # sleep\n                time.sleep(0.5)\n                # search for similarities\n                similar_cids = PubChemAPI.get_similar_cids_by_compound_id(\n                    cid, similarity_type=similarity_type)\n                # update\n                compound_obj.similar_structure_cids = similar_cids\n                # return\n                return compound_obj\n            else:\n                raise Exception(f\"compound {name} not found!\")\n        else:\n            raise Exception(f\"{cid}/{name} format is not valid!\")\n    except Exception as e:\n        print(e)\n</code></pre>"},{"location":"modules/#pubchemquery.app.get_cid_by_inchi","title":"<code>get_cid_by_inchi(inchi)</code>","text":"<p>Get a cid (only one) by inchi</p>"},{"location":"modules/#pubchemquery.app.get_cid_by_inchi--parameters","title":"Parameters","text":"<p>inchi : str     e.g. InChI=1S/C3H8/c1-3-2/h3H2,1-2H3</p>"},{"location":"modules/#pubchemquery.app.get_cid_by_inchi--returns","title":"Returns","text":"<p>str     cid</p> Source code in <code>pubchemquery/app.py</code> <pre><code>def get_cid_by_inchi(inchi: str):\n    '''\n    Get a cid (only one) by inchi\n\n    Parameters\n    ----------\n    inchi : str\n        e.g. InChI=1S/C3H8/c1-3-2/h3H2,1-2H3\n\n    Returns\n    -------\n    str\n        cid\n    '''\n    try:\n        res = PubChemAPI.get_cids_by_inchi(inchi)\n        if len(res) == 0:\n            return \"Not Found!\"\n        res = str(res[0]) if len(res) == 1 else res\n        return res\n    except Exception as e:\n        print(e)\n</code></pre>"},{"location":"modules/#pubchemquery.app.get_cid_by_name","title":"<code>get_cid_by_name(name)</code>","text":"<p>Get a cid (only one) by name for instance, benzene cid</p>"},{"location":"modules/#pubchemquery.app.get_cid_by_name--parameters","title":"Parameters","text":"<p>name : str     compound name (https://pubchem.ncbi.nlm.nih.gov/)</p>"},{"location":"modules/#pubchemquery.app.get_cid_by_name--returns","title":"Returns","text":"<p>str     cid</p> Source code in <code>pubchemquery/app.py</code> <pre><code>def get_cid_by_name(name) -&gt; str:\n    '''\n    Get a cid (only one) by name\n    for instance, benzene cid\n\n    Parameters\n    ----------\n    name : str\n        compound name (https://pubchem.ncbi.nlm.nih.gov/)\n\n    Returns\n    -------\n    str\n        cid  \n    '''\n    try:\n        res = PubChemAPI.get_cid_by_name(name, name_type='complete')\n        res = res[0] if len(res) == 1 else \"Not Found!\"\n        return res\n    except Exception as e:\n        print(e)\n</code></pre>"},{"location":"modules/#pubchemquery.app.get_cids_by_formula","title":"<code>get_cids_by_formula(formula)</code>","text":"<p>Get all cids by formula for instance, CH4</p>"},{"location":"modules/#pubchemquery.app.get_cids_by_formula--parameters","title":"Parameters","text":"<p>formula : str     compound formula (https://pubchem.ncbi.nlm.nih.gov/)</p>"},{"location":"modules/#pubchemquery.app.get_cids_by_formula--returns","title":"Returns","text":"<p>str     cid</p> Source code in <code>pubchemquery/app.py</code> <pre><code>def get_cids_by_formula(formula):\n    '''\n    Get all cids by formula\n    for instance, CH4\n\n    Parameters\n    ----------\n    formula : str\n        compound formula (https://pubchem.ncbi.nlm.nih.gov/)\n\n    Returns\n    -------\n    str\n        cid\n    '''\n    try:\n        res = PubChemAPI.get_cids_by_formula(formula)\n        if len(res) == 0:\n            return \"Not Found!\"\n        res = res[0] if len(res) == 1 else res\n        return res\n    except Exception as e:\n        print(e)\n</code></pre>"},{"location":"modules/#pubchemquery.app.get_cids_by_name","title":"<code>get_cids_by_name(name)</code>","text":"<p>Get a cid list by name (if available) for instance, all cids have a hydroxyl functional group</p>"},{"location":"modules/#pubchemquery.app.get_cids_by_name--parameters","title":"Parameters","text":"<p>name : str     compound name (https://pubchem.ncbi.nlm.nih.gov/)</p>"},{"location":"modules/#pubchemquery.app.get_cids_by_name--returns","title":"Returns","text":"<p>list[str]     cid list</p> Source code in <code>pubchemquery/app.py</code> <pre><code>def get_cids_by_name(name) -&gt; list[str]:\n    '''\n    Get a cid list by name (if available)\n    for instance, all cids have a hydroxyl functional group\n\n    Parameters\n    ----------\n    name : str\n        compound name (https://pubchem.ncbi.nlm.nih.gov/)\n\n    Returns\n    -------\n    list[str]\n        cid list \n    '''\n    try:\n        res = PubChemAPI.get_cid_by_name(name, name_type='word')\n        res = res if len(res) != 0 else []\n        # log\n        if len(res) == 0:\n            print(\"Not Found!\")\n        return res\n    except Exception as e:\n        print(e)\n</code></pre>"},{"location":"modules/#pubchemquery.app.get_image_by_cid","title":"<code>get_image_by_cid(cid, image_format='2d', image_size='large')</code>","text":"<p>Get compound structure image</p>"},{"location":"modules/#pubchemquery.app.get_image_by_cid--parameters","title":"Parameters","text":"<p>cid : str,int     compound id image_format : str     3d, 2d (default: 2d) image_size : str     small, large, 250x250</p>"},{"location":"modules/#pubchemquery.app.get_image_by_cid--returns","title":"Returns","text":"<p>PIL.Image     cid image</p> Source code in <code>pubchemquery/app.py</code> <pre><code>def get_image_by_cid(cid, image_format='2d', image_size='large'):\n    '''\n    Get compound structure image\n\n    Parameters\n    ----------\n    cid : str,int\n        compound id\n    image_format : str\n        3d, 2d (default: 2d)\n    image_size : str\n        small, large, 250x250\n\n    Returns\n    -------\n    PIL.Image\n        cid image\n    '''\n    try:\n        return PubChemAPI.get_structure_image(cid=int(cid), image_format=image_format, image_size=image_size)\n    except Exception as e:\n        print(e)\n</code></pre>"},{"location":"modules/#pubchemquery.app.get_image_by_inchi","title":"<code>get_image_by_inchi(inchi, image_format='2d', image_size='large')</code>","text":"<p>Get compound structure image by inchi</p>"},{"location":"modules/#pubchemquery.app.get_image_by_inchi--parameters","title":"Parameters","text":"<p>inchi : str     compound inchi image_format : str     3d, 2d (default: 2d) image_size : str     small, large, 250x250</p>"},{"location":"modules/#pubchemquery.app.get_image_by_inchi--returns","title":"Returns","text":"<p>PIL.Image     cid image</p> Source code in <code>pubchemquery/app.py</code> <pre><code>def get_image_by_inchi(inchi: str, image_format='2d', image_size='large'):\n    '''\n    Get compound structure image by inchi\n\n    Parameters\n    ----------\n    inchi : str\n        compound inchi\n    image_format : str\n        3d, 2d (default: 2d)\n    image_size : str\n        small, large, 250x250\n\n    Returns\n    -------\n    PIL.Image\n        cid image\n    '''\n    try:\n        # get cid\n        cid = get_cid_by_inchi(inchi)\n        # sleep\n        time.sleep(0.5)\n        # check\n        if isinstance(cid, list):\n            cid = cid[0]\n        elif isinstance(cid, int) or isinstance(cid, str):\n            cid = str(cid)\n        else:\n            return None\n        # get image\n        return PubChemAPI.get_structure_image(cid=int(cid), image_format=image_format, image_size=image_size)\n    except Exception as e:\n        print(e)\n</code></pre>"},{"location":"modules/#pubchemquery.app.get_image_by_name","title":"<code>get_image_by_name(name, image_format='2d', image_size='large')</code>","text":"<p>Get compound structure image</p>"},{"location":"modules/#pubchemquery.app.get_image_by_name--parameters","title":"Parameters","text":"<p>name : str     compound name (IUPAC Name) image_format : str     3d, 2d (default: 2d) image_size : str     small, large, 250x250</p>"},{"location":"modules/#pubchemquery.app.get_image_by_name--returns","title":"Returns","text":"<p>PIL.Image     cid image</p> Source code in <code>pubchemquery/app.py</code> <pre><code>def get_image_by_name(name, image_format='2d', image_size='large'):\n    '''\n    Get compound structure image\n\n    Parameters\n    ----------\n    name : str\n        compound name (IUPAC Name)\n    image_format : str\n        3d, 2d (default: 2d)\n    image_size : str\n        small, large, 250x250\n\n    Returns\n    -------\n    PIL.Image\n        cid image\n    '''\n    try:\n        return PubChemAPI.get_structure_image(name=name, image_format=image_format, image_size=image_size)\n    except Exception as e:\n        print(e)\n</code></pre>"},{"location":"modules/#pubchemquery.app.get_similar_structures_cids_by_compound_id","title":"<code>get_similar_structures_cids_by_compound_id(val, compound_id='cid', similarity_type='fastsimilarity_2d')</code>","text":"<p>Get similar structures by cid</p>"},{"location":"modules/#pubchemquery.app.get_similar_structures_cids_by_compound_id--parameters","title":"Parameters","text":"<p>val : int or str     compound id e.g. 297, 'C1=CC=CC=C1', 'InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H' compound_id : str     cid, SMILES, InChI (default: cid) similarity_type : str     fastsimilarity_2d, fastsimilarity_3d (default: fastsimilarity_2d)</p>"},{"location":"modules/#pubchemquery.app.get_similar_structures_cids_by_compound_id--returns","title":"Returns","text":"<p>list[str]     cid list</p> Source code in <code>pubchemquery/app.py</code> <pre><code>def get_similar_structures_cids_by_compound_id(val, compound_id='cid', similarity_type='fastsimilarity_2d') -&gt; list:\n    '''\n    Get similar structures by cid\n\n    Parameters\n    ----------\n    val : int or str\n        compound id e.g. 297, 'C1=CC=CC=C1', 'InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H'\n    compound_id : str\n        cid, SMILES, InChI (default: cid)\n    similarity_type : str\n        fastsimilarity_2d, fastsimilarity_3d (default: fastsimilarity_2d)\n\n    Returns\n    -------\n    list[str]\n        cid list\n    '''\n    try:\n        res = PubChemAPI.get_similar_cids_by_compound_id(\n            str(val), compound_id=compound_id, similarity_type=similarity_type)\n        res = res if len(res) != 0 else []\n        return res\n    except Exception as e:\n        print(e)\n</code></pre>"},{"location":"modules/#pubchemquery.app.get_structure_by_cid","title":"<code>get_structure_by_cid(cid, file_format='SDF', record_type='3d', save_file=False, file_dir='')</code>","text":"<p>Get a compound structure by cid</p>"},{"location":"modules/#pubchemquery.app.get_structure_by_cid--parameters","title":"Parameters","text":"<p>cid : int or str     compound id file_format : str     SDF, JSON record_type : str     3d, 2d save_file : bool     the sdf file is saved file_dir : str     directory path, if it is empty, the current directory is selected.</p>"},{"location":"modules/#pubchemquery.app.get_structure_by_cid--returns","title":"Returns","text":"<p>str     sdf string</p> Source code in <code>pubchemquery/app.py</code> <pre><code>def get_structure_by_cid(cid, file_format='SDF', record_type='3d', save_file=False, file_dir=''):\n    '''\n    Get a compound structure by cid\n\n    Parameters\n    ----------\n    cid : int or str\n        compound id\n    file_format : str\n        SDF, JSON\n    record_type : str\n        3d, 2d\n    save_file : bool\n        the sdf file is saved\n    file_dir : str\n        directory path, if it is empty, the current directory is selected.\n\n    Returns\n    -------\n    str\n        sdf string\n    '''\n    try:\n        return PubChemAPI.get_sdf_by_cid(cid, file_format=file_format, record_type=record_type, save=save_file, location=file_dir)\n    except Exception as e:\n        print(e)\n</code></pre>"},{"location":"modules/#pubchemquery.app.get_structure_by_name","title":"<code>get_structure_by_name(name, file_format='SDF', record_type='3d', save_file=False, file_dir='')</code>","text":"<p>Get a compound structure by cid</p>"},{"location":"modules/#pubchemquery.app.get_structure_by_name--parameters","title":"Parameters","text":"<p>name : str     compound id file_format : str     SDF, JSON record_type : str     3d, 2d save_file : bool     the sdf file is saved file_dir : str     directory path, if it is empty, the current directory is selected.</p>"},{"location":"modules/#pubchemquery.app.get_structure_by_name--returns","title":"Returns","text":"<p>str     sdf string</p> Source code in <code>pubchemquery/app.py</code> <pre><code>def get_structure_by_name(name, file_format='SDF', record_type='3d', save_file=False, file_dir=''):\n    '''\n    Get a compound structure by cid\n\n    Parameters\n    ----------\n    name : str\n        compound id\n    file_format : str\n        SDF, JSON\n    record_type : str\n        3d, 2d\n    save_file : bool\n        the sdf file is saved\n    file_dir : str\n        directory path, if it is empty, the current directory is selected.\n\n    Returns\n    -------\n    str\n        sdf string\n    '''\n    try:\n        return PubChemAPI.get_sdf_by_name(name, file_format=file_format, record_type=record_type, save=save_file, location=file_dir)\n    except Exception as e:\n        print(e)\n</code></pre>"}]}